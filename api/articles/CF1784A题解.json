{"title":"CF1784A题解","uid":"84cd9d22260caf953fbe318a70e7da7c","slug":"CF1784A题解","date":"2023-03-19T08:32:12.000Z","updated":"2023-06-24T07:21:41.318Z","comments":true,"path":"api/articles/CF1784A题解.json","keywords":"Scorpio's Blog","cover":"https://cdn.luogu.com.cn/upload/image_hosting/kmwfq1xk.png","content":"<ul>\n<li><p><a href=\"https://www.luogu.com.cn/problem/CF1784A\">题目链接</a></p>\n</li>\n<li><p>题目大意<br>有一个序列 a1, a2 … a{n-1}, a{n} 且所有元素皆为正整数，共有两种操作，使得进行若干次操作后的序列的所有元素皆不大于零，求第一种操作的最小操作次数。</p>\n<p>操作如下：   </p>\n<ol>\n<li>选择序列中的任意一个正整数元素，将其减一；</li>\n<li>将序列中所有的正整数元素都将其减一，如有元素因此操作小于等于零，则再次进行一次此操作；</li>\n</ol>\n</li>\n<li><p>注意<br>第一种操作可以执行无数次，第二种操作只可以执行一次。</p>\n</li>\n<li><p>思路<br>很明显，如果序列中的所有元素皆满足 ai + 1 = a{i + 1} 的话，那么我们只需要进行一次操作二即可将序列清零。</p>\n<p>所以，我们便可以先使用操作一将序列有序化（如上），然后在进行一次操作二即可。</p>\n<p>但是，为了最小化第一种操作，为了避免不需要的操作，我们先将序列排序一遍.</p>\n</li>\n<li><p>代码实现</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">namespace</span> S_T_D <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> n <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\tch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n\t\t\tch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> f <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">^</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\t\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">read</span> <span class=\"token expression\"><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> S_T_D<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> tot<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tT <span class=\"token operator\">=</span> read<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 多组数据 </span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tn <span class=\"token operator\">=</span> read<span class=\"token punctuation\">;</span>\n\t\ttot <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token comment\">/*\n\t\t\ttot : 操作一次数 \n\t\t\tnum : 序列有序化基准值\n\t\t*/</span> \n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 先从小到大排序一遍 </span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 如果等于基准值，无需操作，跳过 </span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token operator\">++</span> num<span class=\"token punctuation\">,</span> tot <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> num<span class=\"token punctuation\">;</span>\t   <span class=\"token comment\">// 否则将基准值 + 1，再进行操作一 </span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token function\">write</span><span class=\"token punctuation\">(</span>tot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 输出答案 </span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"此题解仅供参考-谢谢\"><a href=\"#此题解仅供参考-谢谢\" class=\"headerlink\" title=\"此题解仅供参考, 谢谢!\"></a>此题解仅供参考, 谢谢!</h2></li>\n</ul>\n","text":" 题目链接 题目大意有一个序列 a1, a2 … a{n-1}, a{n} 且所有元素皆为正整数，共有两种操作，使得进行若干次操作后的序列的所有元素皆不大于零，求第一种操作的最小操作次数。 操作如下： 选择序列中的任意一个正整数元素，将其减一； 将序列中所有的正整数元素都将其减一...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Problem-Explanation","slug":"Problem-Explanation","count":6,"path":"api/categories/Problem-Explanation.json"}],"tags":[{"name":"Codeforces","slug":"Codeforces","count":3,"path":"api/tags/Codeforces.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A4%E9%A2%98%E8%A7%A3%E4%BB%85%E4%BE%9B%E5%8F%82%E8%80%83-%E8%B0%A2%E8%B0%A2\"><span class=\"toc-text\">此题解仅供参考, 谢谢!</span></a></li></ol>","author":{"name":"Scorpio","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/63fb3165f144a010072484b1.png","link":"/","description":"一位正在享受生活的小伙","socials":{"github":"https://github.com/Scorpio-Limit","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/lonely-scorpio-11","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1179082277"}}}},"mapped":true,"prev_post":{"title":"CF472B题解","uid":"11d1cc0f8fe89d28a1b1aece459d33f1","slug":"CF472B题解","date":"2023-03-19T08:42:27.000Z","updated":"2023-06-24T07:21:52.299Z","comments":true,"path":"api/articles/CF472B题解.json","keywords":"Scorpio's Blog","cover":"https://pic.imgdb.cn/item/648eb0e51ddac507cc7d0550.jpg","text":" 题目链接 题目大意有 n 个人， 每个人都有自己想要到达的楼层， 第 i 想要去第 fi 层。 同时有一个电梯， 电梯的最大承受人数为 k。 求电梯的最小运行层数。 思路要求电梯的最小运行层数， 我们就要先知道单次电梯的运行层数怎么求。 假设电梯里有 m 个人, 其中第 i 个...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Problem-Explanation","slug":"Problem-Explanation","count":6,"path":"api/categories/Problem-Explanation.json"}],"tags":[{"name":"Codeforces","slug":"Codeforces","count":3,"path":"api/tags/Codeforces.json"}],"author":{"name":"Scorpio","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/63fb3165f144a010072484b1.png","link":"/","description":"一位正在享受生活的小伙","socials":{"github":"https://github.com/Scorpio-Limit","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/lonely-scorpio-11","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1179082277"}}}}},"next_post":{"title":"2018年刑侦科推理试题讲解","uid":"365f8d660f31d41852d831b89da3e2a8","slug":"2018年刑侦科推理试题讲解","date":"2023-01-26T06:38:13.000Z","updated":"2023-06-24T07:21:45.903Z","comments":true,"path":"api/articles/2018年刑侦科推理试题讲解.json","keywords":"Scorpio's Blog","cover":"https://cdn.luogu.com.cn/upload/image_hosting/yr9wzjn4.png","text":"提示：本文章将讲解 《2018年刑侦科推理试题》 的解题过程 首先看看题就知道这 10 道题目之间相互有线索关联着。第一轮查找线索：（找出题面话语背后的意思）第1题：找不到有用的线索，答案应该是根据其它题目确定的；第2题：说答案是第5题的答案，但是答案的排列完全不同（A.C B....","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"学术","slug":"学术","count":2,"path":"api/categories/学术.json"}],"tags":[{"name":"讲解","slug":"讲解","count":1,"path":"api/tags/讲解.json"},{"name":"逻辑推理","slug":"逻辑推理","count":1,"path":"api/tags/逻辑推理.json"},{"name":"刑侦科","slug":"刑侦科","count":1,"path":"api/tags/刑侦科.json"},{"name":"2018年刑侦科推理试题","slug":"2018年刑侦科推理试题","count":1,"path":"api/tags/2018年刑侦科推理试题.json"}],"author":{"name":"Scorpio","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/63fb3165f144a010072484b1.png","link":"/","description":"一位正在享受生活的小伙","socials":{"github":"https://github.com/Scorpio-Limit","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/lonely-scorpio-11","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/1179082277"}}}}}}