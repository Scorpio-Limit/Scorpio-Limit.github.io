{"title":"SP30669题解","uid":"2e7944ca2e6ed341449d1a3cb4b30f5a","slug":"SP30669题解","date":"2023-03-19T08:55:21.000Z","updated":"2023-06-24T07:24:19.878Z","comments":true,"path":"api/articles/SP30669题解.json","keywords":"Limit-Blog","cover":"https://pic.imgdb.cn/item/648eb0b11ddac507cc7cc781.jpg","content":"<ul>\n<li><p><a href=\"https://www.luogu.com.cn/problem/SP30669\">题目链接</a></p>\n</li>\n<li><p>题目大意<br>有个人， 叫 <code>Ada</code>， 她在旅游， 在她那里， 共有 <code>N</code> 个城市， <code>M</code> 条路线。 一般情况下， 别人会去主城市和大城市游玩， 但是她不一般， <code>Ada</code> 想去离自己最远的地方玩， 因为她觉得这样拍的照片更有价值。 <code>Ada</code> 给你发了 <code>Q</code> 条求救， 那么聪明的你， 请你帮她找找距离她最远的城市， 并告诉她有多少个这样的城市。</p>\n</li>\n<li><p>思路<br>根据题意， 我们可以知道， 题目让我们通过最短路求出距离主人公最远的城市以及它们的数量。</p>\n<p> 注意！ 本题是双向边， 而且是通过求最短路找最远的城市， 而不是求最长路。</p>\n<p> 那么， 说到最短路， 会想到什么？</p>\n<p> Floyed， 时间复杂度为 O(N ^ 3)， 但是， 再看看数据， 嗯， 过不了， 会超时。</p>\n<p> 于是， 我们就可以写 dijkstra 再加一点优先队列优化。</p>\n<p> 首先， 我们要知道什么是 dijkstra 算法。 </p>\n<p> dijkstra 算法是用来计算一个点到其它所有点的最短路径的算法， 是一种单源最短路径算法。 </p>\n<p> 也就是说， 只能计算起点只有一个的情况。       </p>\n<p> dijkstra 算法的时间复杂度是 O(N ^ 2)， 它不能处理一些存在负边权的情况。                </p>\n<p> 算法描述：   </p>\n<p> 设起点为 <code>s</code>， dis_v 表示从 <code>s</code> 到 <code>v</code> 的最短路径， <code>w[u][v]</code> 表示有一条从 <code>u</code> 到 <code>v</code> 长度为 <code>w</code> 的路。</p>\n<ul>\n<li>初始化： dis_v = ∞, dis_s = 0               </li>\n<li><code>for (int i = 1; i &lt;= n; ++ i)</code> <ol>\n<li>在没有被访问过的点中找到一个点 <code>u</code> 使得 <code>dis[u]</code> 是最小的。</li>\n<li>将 <code>u</code> 标记为已经访问过。</li>\n<li><code>for</code> 循环对于每一个与 <code>u</code> 相连的未确定的点 <code>v</code>。</li>\n</ol>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">if (dis[v] &gt; dis[u] + w[u][v]) &#123;\n&#x2F;&#x2F; 找到了更短的路径\n\tdis[v] &#x3D; dis[u] + w[u][v];\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>算法结束： <code>dis[v]</code> 为 <code>s</code> 到 <code>v</code> 的最短路径距离。</li>\n</ul>\n<p> 既然你已经懂得 dijkstra 算法了， 那么就先去试试这两题吧：       </p>\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P4779\">单源最短路径</a></li>\n<li><a href=\"https://www.luogu.com.cn/problem/P1629\">邮递员送信</a></li>\n</ul>\n<p> 但是， 我们再看看本题的数据：              </p>\n<p> 1 &lt;= N &lt; 10 ^ 5 , 0 &lt;= M &lt;= 10 ^ 6。           </p>\n<p> 嗯， 普通的 dijkstra 肯定会超时 ， 所以， 我们就需要优先队列优化一下。 </p>\n<p> 但是， 这题目翻译有坑， 题中写的是 1 &lt;= N &lt; 10 ^ 5， 但如果你只开 10 ^ 5, 那么空间是不够的。</p>\n<p> 所以， 我们最好开大一点。</p>\n<p> 所以， 堆优化过的 dijkstra 算法就是如下代码 （ 时间复杂度为 O(m log m)， 要用邻接表储存边 ）：  </p>\n<ul>\n<li>邻接表储存<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nf<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\nf<span class=\"token punctuation\">[</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>edge <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\nf<span class=\"token punctuation\">[</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nhead<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tot<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>dijkstra 优先队列优化版<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dijkstra</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start_point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   \n<span class=\"token comment\">// dijkstra 优先队列优化版</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Inf<span class=\"token punctuation\">;</span>\n\t\tv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>   <span class=\"token comment\">// 初始化</span>\n\tdis<span class=\"token punctuation\">[</span>start_point<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 起点标记为 0 </span>\n\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 入队</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 如果队列不为空</span>\n\t\t<span class=\"token keyword\">int</span> minn <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 取出所有的点中最小的一个</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 取出</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 如果该点被访问过， 则跳过</span>\n\t\tv<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 标记该点已访问过</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>edge<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dis<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 更新最短路</span>\n\t\t\t  dis<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n\t\t\t  q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>dis<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 下一个点入队</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p> 接着， 我们在每一次讯问都跑一遍以输入的 <code>s</code> 为起点的 dijkstra ， 最后再找到最远的城市和它们的数量就行了。</p>\n<p> 那么， 怎么找最远的呢？</p>\n<p> 首先， 我们可以定义 waylongest = -1, numcity = 1。</p>\n<p> 接着， 我们用一个 <code>for</code> 循环， 其主要内容为：           </p>\n<ul>\n<li>如果 dis_i = maxn， 则跳过。</li>\n<li>如果记录的 waylongest 小于 dis_i， 则把 waylongest = dis_i。</li>\n<li>如果记录的 waylongest 等于 dis_i， 则把 numcity++。</li>\n<li>否则， 不做如何处理。</li>\n</ul>\n<p> 所以， 该部分代码为：       </p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> way_longest <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_city <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    \n     <span class=\"token comment\">/*\n      way_longest : 最远的距离\n      num_city    : 距离最远的城市的个数\n      */</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 找</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> Inf<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token comment\">// 没有通往此点的最短路径， 则跳过</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> way_longest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   \n          <span class=\"token comment\">// 有更远的城市</span>\n\t\tway_longest <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 更新最远距离</span>\n\t\tnum_city <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 个数重新设为 1</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> way_longest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 最短路径长度与最远距离相等， 则城市个数加 1</span>\n\t\t<span class=\"token operator\">++</span> num_city<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\t\n<span class=\"token punctuation\">&#125;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> way_longest <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> num_city <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p> 最后再把结果输出就行了。</p>\n</li>\n</ul>\n<ul>\n<li>代码实现<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span>  <span class=\"token comment\">// 万能头</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">10000001</span>        </span><span class=\"token comment\">// 数组大小</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">Inf</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>     </span><span class=\"token comment\">// 用来给 dis 初始化</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\npriority_queue <span class=\"token operator\">&lt;</span> pair <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 优先队列</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> qt<span class=\"token punctuation\">;</span>    \n<span class=\"token comment\">/*\n n  :  城市的数量\n m  :  道路的数量\n qt :  询问的次数\n*/</span>\n<span class=\"token keyword\">int</span> dis<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">/*\n dis : 用来记录最短路径\n  v  : 用来标记该点是否走过\n*/</span>\n<span class=\"token keyword\">int</span> tot<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n 邻接表（上）\n 储  存（下）\n*/</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tf<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\tf<span class=\"token punctuation\">[</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>edge <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n\tf<span class=\"token punctuation\">[</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\thead<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tot<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dijkstra</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start_point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   \n<span class=\"token comment\">// dijkstra 优先队列优化版</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Inf<span class=\"token punctuation\">;</span>\n\t\tv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>   <span class=\"token comment\">// 初始化</span>\n\tdis<span class=\"token punctuation\">[</span>start_point<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 起点标记为 0 </span>\n\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 入队</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 如果队列不为空</span>\n\t\t<span class=\"token keyword\">int</span> minn <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 取出所有的点中最小的一个</span>\n\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 取出</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 如果该点被访问过， 则跳过</span>\n\t\tv<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 标记该点已访问过</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>edge<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dis<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 更新最短路</span>\n\t\t\t  dis<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>minn<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n\t\t\t  q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>dis<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 下一个点入队</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">//\tfreopen (\"SP30669.out\", \"w\", stdout);</span>\n\tcin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> qt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 输入</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 建图</span>\n\t\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">;</span>\n\t\tcin <span class=\"token operator\">>></span> u <span class=\"token operator\">>></span> v <span class=\"token operator\">>></span> w<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">add</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">add</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 双向边</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> qt<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// qt 次询问</span>\n\t\t<span class=\"token keyword\">int</span> start_point<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 起点</span>\n\t\tcin <span class=\"token operator\">>></span> start_point<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">dijkstra</span> <span class=\"token punctuation\">(</span>start_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 跑一遍 dijkstra</span>\n\t\t<span class=\"token keyword\">int</span> way_longest <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num_city <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    \n        <span class=\"token comment\">/*\n         way_longest : 最远的距离\n         num_city    : 距离最远的城市的个数\n        */</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> Inf<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token comment\">// 没有通往此点的最短路径， 则跳过</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> way_longest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   \n            <span class=\"token comment\">// 有更远的城市</span>\n\t\t\t\tway_longest <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 更新最远距离</span>\n\t\t\t\tnum_city <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 个数重新设为 1</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> way_longest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 最短路径长度与最远距离相等， 则城市个数加 1</span>\n\t\t\t\t<span class=\"token operator\">++</span> num_city<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\t\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> way_longest <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> num_city <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 完美结束</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"此题解仅供参考-谢谢\"><a href=\"#此题解仅供参考-谢谢\" class=\"headerlink\" title=\"此题解仅供参考, 谢谢!\"></a>此题解仅供参考, 谢谢!</h2></li>\n</ul>\n","feature":true,"text":" 题目链接 题目大意有个人， 叫 Ada， 她在旅游， 在她那里， 共有 N 个城市， M 条路线。 一般情况下， 别人会去主城市和大城市游玩， 但是她不一般， Ada 想去离自己最远的地方玩， 因为她觉得这样拍的照片更有价值。 Ada 给你发了 Q 条求救， 那么聪明的你， 请...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"Problem-Explanation","slug":"Problem-Explanation","count":6,"path":"api/categories/Problem-Explanation.json"}],"tags":[{"name":"SPOJ","slug":"SPOJ","count":1,"path":"api/tags/SPOJ.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A4%E9%A2%98%E8%A7%A3%E4%BB%85%E4%BE%9B%E5%8F%82%E8%80%83-%E8%B0%A2%E8%B0%A2\"><span class=\"toc-text\">此题解仅供参考, 谢谢!</span></a></li></ol>","author":{"name":"Scorpio","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/63fb3165f144a010072484b1.png","link":"/","description":"一位正在享受生活的小伙","socials":{"github":"https://github.com/Scorpio-Limit","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/lonely-scorpio-11","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"UVA13197题解","uid":"2c236756dec82651c6e8b2a340fb3146","slug":"UVA13197题解","date":"2023-03-19T08:53:19.000Z","updated":"2023-06-24T07:21:54.891Z","comments":true,"path":"api/articles/UVA13197题解.json","keywords":"Limit-Blog","cover":"https://pic.imgdb.cn/item/648eb30c1ddac507cc801013.jpg","text":" 题目链接 题目大意有两个非负整数 a 和 p, 需要我们求出所有的非负整数 x 使得满足 x ^ 3 mod p = a 且 x &lt; p. 思路看完题目， 很容易想到， 直接枚举！因为 x &lt; p, 所以 x 最大只能是 p - 1, 再因为 x 是非负数， 所以 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Problem-Explanation","slug":"Problem-Explanation","count":6,"path":"api/categories/Problem-Explanation.json"}],"tags":[{"name":"UVA","slug":"UVA","count":2,"path":"api/tags/UVA.json"}],"author":{"name":"Scorpio","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/63fb3165f144a010072484b1.png","link":"/","description":"一位正在享受生活的小伙","socials":{"github":"https://github.com/Scorpio-Limit","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/lonely-scorpio-11","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"feature":true}}