<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Limit-Blog</title>
  
  <subtitle>记录美好生活</subtitle>
  <link href="https://blog.scorpiolimit.top/atom.xml" rel="self"/>
  
  <link href="https://blog.scorpiolimit.top/"/>
  <updated>2023-06-24T07:24:19.878Z</updated>
  <id>https://blog.scorpiolimit.top/</id>
  
  <author>
    <name>Scorpio_Limit</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SP30669题解</title>
    <link href="https://blog.scorpiolimit.top/post/SP30669%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.scorpiolimit.top/post/SP30669%E9%A2%98%E8%A7%A3/</id>
    <published>2023-03-19T08:55:21.000Z</published>
    <updated>2023-06-24T07:24:19.878Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.luogu.com.cn/problem/SP30669">题目链接</a></p></li><li><p>题目大意<br>有个人， 叫 <code>Ada</code>， 她在旅游， 在她那里， 共有 <code>N</code> 个城市， <code>M</code> 条路线。 一般情况下， 别人会去主城市和大城市游玩， 但是她不一般， <code>Ada</code> 想去离自己最远的地方玩， 因为她觉得这样拍的照片更有价值。 <code>Ada</code> 给你发了 <code>Q</code> 条求救， 那么聪明的你， 请你帮她找找距离她最远的城市， 并告诉她有多少个这样的城市。</p></li><li><p>思路<br>根据题意， 我们可以知道， 题目让我们通过最短路求出距离主人公最远的城市以及它们的数量。</p><p> 注意！ 本题是双向边， 而且是通过求最短路找最远的城市， 而不是求最长路。</p><p> 那么， 说到最短路， 会想到什么？</p><p> Floyed， 时间复杂度为 O(N ^ 3)， 但是， 再看看数据， 嗯， 过不了， 会超时。</p><p> 于是， 我们就可以写 dijkstra 再加一点优先队列优化。</p><p> 首先， 我们要知道什么是 dijkstra 算法。 </p><p> dijkstra 算法是用来计算一个点到其它所有点的最短路径的算法， 是一种单源最短路径算法。 </p><p> 也就是说， 只能计算起点只有一个的情况。       </p><p> dijkstra 算法的时间复杂度是 O(N ^ 2)， 它不能处理一些存在负边权的情况。                </p><p> 算法描述：   </p><p> 设起点为 <code>s</code>， dis_v 表示从 <code>s</code> 到 <code>v</code> 的最短路径， <code>w[u][v]</code> 表示有一条从 <code>u</code> 到 <code>v</code> 长度为 <code>w</code> 的路。</p><ul><li>初始化： dis_v = ∞, dis_s = 0               </li><li><code>for (int i = 1; i &lt;= n; ++ i)</code> <ol><li>在没有被访问过的点中找到一个点 <code>u</code> 使得 <code>dis[u]</code> 是最小的。</li><li>将 <code>u</code> 标记为已经访问过。</li><li><code>for</code> 循环对于每一个与 <code>u</code> 相连的未确定的点 <code>v</code>。</li></ol> <pre class="line-numbers language-none"><code class="language-none">if (dis[v] &gt; dis[u] + w[u][v]) &#123;&#x2F;&#x2F; 找到了更短的路径dis[v] &#x3D; dis[u] + w[u][v];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>算法结束： <code>dis[v]</code> 为 <code>s</code> 到 <code>v</code> 的最短路径距离。</li></ul><p> 既然你已经懂得 dijkstra 算法了， 那么就先去试试这两题吧：       </p><ul><li><a href="https://www.luogu.com.cn/problem/P4779">单源最短路径</a></li><li><a href="https://www.luogu.com.cn/problem/P1629">邮递员送信</a></li></ul><p> 但是， 我们再看看本题的数据：              </p><p> 1 &lt;= N &lt; 10 ^ 5 , 0 &lt;= M &lt;= 10 ^ 6。           </p><p> 嗯， 普通的 dijkstra 肯定会超时 ， 所以， 我们就需要优先队列优化一下。 </p><p> 但是， 这题目翻译有坑， 题中写的是 1 &lt;= N &lt; 10 ^ 5， 但如果你只开 10 ^ 5, 那么空间是不够的。</p><p> 所以， 我们最好开大一点。</p><p> 所以， 堆优化过的 dijkstra 算法就是如下代码 （ 时间复杂度为 O(m log m)， 要用邻接表储存边 ）：  </p><ul><li>邻接表储存<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>f<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>edge <span class="token operator">=</span> w<span class="token punctuation">;</span>f<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>dijkstra 优先队列优化版<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dijkstra</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start_point<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// dijkstra 优先队列优化版</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">// 初始化</span>dis<span class="token punctuation">[</span>start_point<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 起点标记为 0 </span>q<span class="token punctuation">.</span><span class="token function">push</span> <span class="token punctuation">(</span><span class="token function">make_pair</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start_point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 入队</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 如果队列不为空</span><span class="token keyword">int</span> minn <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>   <span class="token comment">// 取出所有的点中最小的一个</span>q<span class="token punctuation">.</span><span class="token function">pop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 取出</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>minn<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 如果该点被访问过， 则跳过</span>v<span class="token punctuation">[</span>minn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 标记该点已访问过</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>minn<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> y <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>edge<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>minn<span class="token punctuation">]</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 更新最短路</span>  dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>minn<span class="token punctuation">]</span> <span class="token operator">+</span> z<span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span> <span class="token punctuation">(</span><span class="token function">make_pair</span> <span class="token punctuation">(</span><span class="token operator">-</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 下一个点入队</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p> 接着， 我们在每一次讯问都跑一遍以输入的 <code>s</code> 为起点的 dijkstra ， 最后再找到最远的城市和它们的数量就行了。</p><p> 那么， 怎么找最远的呢？</p><p> 首先， 我们可以定义 waylongest = -1, numcity = 1。</p><p> 接着， 我们用一个 <code>for</code> 循环， 其主要内容为：           </p><ul><li>如果 dis_i = maxn， 则跳过。</li><li>如果记录的 waylongest 小于 dis_i， 则把 waylongest = dis_i。</li><li>如果记录的 waylongest 等于 dis_i， 则把 numcity++。</li><li>否则， 不做如何处理。</li></ul><p> 所以， 该部分代码为：       </p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> way_longest <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num_city <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">/*      way_longest : 最远的距离      num_city    : 距离最远的城市的个数      */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 找</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> Inf<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 没有通往此点的最短路径， 则跳过</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> way_longest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// 有更远的城市</span>way_longest <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 更新最远距离</span>num_city <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 个数重新设为 1</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> way_longest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 最短路径长度与最远距离相等， 则城市个数加 1</span><span class="token operator">++</span> num_city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  cout <span class="token operator">&lt;&lt;</span> way_longest <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> num_city <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>   <span class="token comment">// 输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 最后再把结果输出就行了。</p></li></ul><ul><li>代码实现<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span>  <span class="token comment">// 万能头</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10000001</span>        </span><span class="token comment">// 数组大小</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Inf</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>     </span><span class="token comment">// 用来给 dis 初始化</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>priority_queue <span class="token operator">&lt;</span> pair <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> q<span class="token punctuation">;</span>     <span class="token comment">// 优先队列</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> qt<span class="token punctuation">;</span>    <span class="token comment">/* n  :  城市的数量 m  :  道路的数量 qt :  询问的次数*/</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* dis : 用来记录最短路径  v  : 用来标记该点是否走过*/</span><span class="token keyword">int</span> tot<span class="token punctuation">,</span> head<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> next<span class="token punctuation">,</span> edge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* 邻接表（上） 储  存（下）*/</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>f<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>f<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>edge <span class="token operator">=</span> w<span class="token punctuation">;</span>f<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dijkstra</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start_point<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// dijkstra 优先队列优化版</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Inf<span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">// 初始化</span>dis<span class="token punctuation">[</span>start_point<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 起点标记为 0 </span>q<span class="token punctuation">.</span><span class="token function">push</span> <span class="token punctuation">(</span><span class="token function">make_pair</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start_point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 入队</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 如果队列不为空</span><span class="token keyword">int</span> minn <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>   <span class="token comment">// 取出所有的点中最小的一个</span>q<span class="token punctuation">.</span><span class="token function">pop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 取出</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>minn<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 如果该点被访问过， 则跳过</span>v<span class="token punctuation">[</span>minn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 标记该点已访问过</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>minn<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> y <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>edge<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>minn<span class="token punctuation">]</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 更新最短路</span>  dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>minn<span class="token punctuation">]</span> <span class="token operator">+</span> z<span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span> <span class="token punctuation">(</span><span class="token function">make_pair</span> <span class="token punctuation">(</span><span class="token operator">-</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 下一个点入队</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//freopen ("SP30669.out", "w", stdout);</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> qt<span class="token punctuation">;</span>    <span class="token comment">// 输入</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 建图</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span><span class="token function">add</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span> <span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 双向边</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> qt<span class="token punctuation">;</span> <span class="token operator">++</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// qt 次询问</span><span class="token keyword">int</span> start_point<span class="token punctuation">;</span>      <span class="token comment">// 起点</span>cin <span class="token operator">>></span> start_point<span class="token punctuation">;</span><span class="token function">dijkstra</span> <span class="token punctuation">(</span>start_point<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 跑一遍 dijkstra</span><span class="token keyword">int</span> way_longest <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num_city <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">/*         way_longest : 最远的距离         num_city    : 距离最远的城市的个数        */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> Inf<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>              <span class="token comment">// 没有通往此点的最短路径， 则跳过</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> way_longest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 有更远的城市</span>way_longest <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 更新最远距离</span>num_city <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 个数重新设为 1</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> way_longest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 最短路径长度与最远距离相等， 则城市个数加 1</span><span class="token operator">++</span> num_city<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> way_longest <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> num_city <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>   <span class="token comment">// 输出</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 完美结束</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="此题解仅供参考-谢谢"><a href="#此题解仅供参考-谢谢" class="headerlink" title="此题解仅供参考, 谢谢!"></a>此题解仅供参考, 谢谢!</h2></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/SP30669&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目大意&lt;br&gt;有个人， 叫 &lt;code&gt;Ada&lt;/code&gt;， 她在旅游， 在她那里， 共有 &lt;co</summary>
      
    
    
    
    <category term="Problem-Explanation" scheme="https://blog.scorpiolimit.top/categories/Problem-Explanation/"/>
    
    
    <category term="SPOJ" scheme="https://blog.scorpiolimit.top/tags/SPOJ/"/>
    
  </entry>
  
  <entry>
    <title>UVA13197题解</title>
    <link href="https://blog.scorpiolimit.top/post/UVA13197%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.scorpiolimit.top/post/UVA13197%E9%A2%98%E8%A7%A3/</id>
    <published>2023-03-19T08:53:19.000Z</published>
    <updated>2023-06-24T07:21:54.891Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.luogu.com.cn/problem/UVA13197">题目链接</a></p></li><li><p>题目大意<br>有两个非负整数 a 和 p, 需要我们求出所有的非负整数 x 使得满足 x ^ 3 mod p = a 且 x &lt; p.</p></li><li><p>思路<br>看完题目， 很容易想到， 直接枚举！<br>因为 x &lt; p, 所以 x 最大只能是 p - 1, 再因为 x 是非负数， 所以 x 最小是 0, 那么我们就可以用一个循环把 x 从 0 到 p - 1 全部枚举一遍， 接着再判断 x ^ 3 mod p 是否等于 a 就行了！</p></li><li><p>注意        </p><ol><li>本题多测       </li><li>每一组数据的结尾不能有空格   </li><li>升序输出  </li></ol><p>既然不能有空格， 那要怎么办呢？<br>   其实不难， 我们只需要用一个 <code>flag</code> 记录该答案是否是第一个答案：  </p><ul><li>如果是， 则直接输出 x 就可以；     </li><li>如果不是， 则在输出前还要在输出一个空格；</li></ul></li><li><p>代码实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> p<span class="token punctuation">,</span> x<span class="token punctuation">,</span> flag<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断 x^3 mod p 是否等于 a </span><span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">%</span> p <span class="token operator">==</span> a <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 多测 </span>x <span class="token operator">=</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 预处理 </span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> <span class="token operator">++</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 枚举 x, 从 0 到 p - 1 </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 满足条件， 是答案 </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 该答案是第一个答案 </span><span class="token operator">++</span> flag<span class="token punctuation">;</span>       <span class="token comment">// 修改 flag </span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>   <span class="token comment">// 直接输出 x </span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span> <span class="token comment">// 不是第一个答案， 还要在 x 前面在输出一个空格 </span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token comment">// 记得每一组数据要换行 </span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// 完美散花 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="此题解仅供参考-谢谢"><a href="#此题解仅供参考-谢谢" class="headerlink" title="此题解仅供参考, 谢谢!"></a>此题解仅供参考, 谢谢!</h2></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/UVA13197&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目大意&lt;br&gt;有两个非负整数 a 和 p, 需要我们求出所有的非负整数 x 使得满足 x ^ 3 </summary>
      
    
    
    
    <category term="Problem-Explanation" scheme="https://blog.scorpiolimit.top/categories/Problem-Explanation/"/>
    
    
    <category term="UVA" scheme="https://blog.scorpiolimit.top/tags/UVA/"/>
    
  </entry>
  
  <entry>
    <title>UVA10189题解</title>
    <link href="https://blog.scorpiolimit.top/post/UVA10189%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.scorpiolimit.top/post/UVA10189%E9%A2%98%E8%A7%A3/</id>
    <published>2023-03-19T08:47:25.000Z</published>
    <updated>2023-06-24T07:21:15.097Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.luogu.com.cn/problem/UVA10189">题目链接</a></p></li><li><p>题目大意<br>给你一个字符矩阵， 也就是地雷分布图， 让你求出每个不是地雷的点的周围有多少颗地雷。 有多组数据。</p></li><li><p>思路<br> 根据题目描述， 我们可以知道， 这题就是一个普通的模拟题， 只需要先遍历这个地雷分布图， 如果是 <code>*</code>， 就直接输出 <code>*</code>， 否则就遍历它周围的八个方向是否有地雷， 如果有， 那么计数器就加一， 接着在遍历完八个方向后输出地雷个数。 最后， 在每组数据之前再加一个换行就行了， 但是要注意， 每组数据之间的换行在第一组数据之前不用的， 在最后一个数据的后面也不用。</p><p> 现在， 我们一步一来。</p><ol><li>首先我们先输入 n 和 m， 如果读入到两个都是 0 时结束。 接着， 在输入整个地雷分布图。<br>该部分代码：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 输入</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 结束</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span>                   cin <span class="token operator">>></span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 输入地雷分布图</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>定义一个记录数据的变量并初始化 tot = 0， 当 tot &gt; 0 时， 先输出换行， 该部分指的是每组数据与数据之间换行。<br>该部分代码：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>tot<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token comment">// 数据之间的换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>接着输出 <code>Field #x:</code>， 其中 x 表示 ++ tot， 表示第 x 组数据。<br>该部分代码：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Field #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span> tot <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span>  <span class="token comment">// 数据的个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>然后再遍历整个地雷分布图， 如果是地雷， 直接输出 <code>*</code>， 否则， 遍历周围的八个方向， 如果是地雷， 计数器加一， 接着遍历完八个方向后输出个数就行了。<br>该部分代码：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tot<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 八个方向</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dfs</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 遍历八个方向</span>      <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mx <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> my <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mx <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> my <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> mx <span class="token operator">></span> n <span class="token operator">||</span> my <span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token operator">++</span> num<span class="token punctuation">;</span>              <span class="token comment">// 如果是地雷， 计数器加一</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">dfs</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>     <span class="token comment">// 遍历地雷分布图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>最后， 再把每个部分的代码结合在一起就行了。  </li></ol></li><li><p>代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">101</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> mp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tot<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 八个方向</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dfs</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 遍历八个方向</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mx <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> my <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mx <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> my <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> mx <span class="token operator">></span> n <span class="token operator">||</span> my <span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token operator">++</span> num<span class="token punctuation">;</span>          <span class="token comment">// 如果是地雷， 计数器加一</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">signed</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 输入</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">// 结束</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span>                 cin <span class="token operator">>></span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token comment">// 输入地雷分布图</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tot<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>          <span class="token comment">// 数据之间的换行</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Field #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span> tot <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span>         <span class="token comment">// 数据的个数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">dfs</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>           <span class="token comment">// 遍历地雷分布图</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 完美结束</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="此题解仅供参考-谢谢"><a href="#此题解仅供参考-谢谢" class="headerlink" title="此题解仅供参考, 谢谢!"></a>此题解仅供参考, 谢谢!</h2></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/UVA10189&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目大意&lt;br&gt;给你一个字符矩阵， 也就是地雷分布图， 让你求出每个不是地雷的点的周围有多少颗地雷。</summary>
      
    
    
    
    <category term="Problem-Explanation" scheme="https://blog.scorpiolimit.top/categories/Problem-Explanation/"/>
    
    
    <category term="UVA" scheme="https://blog.scorpiolimit.top/tags/UVA/"/>
    
  </entry>
  
  <entry>
    <title>CF472B题解</title>
    <link href="https://blog.scorpiolimit.top/post/CF472B%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.scorpiolimit.top/post/CF472B%E9%A2%98%E8%A7%A3/</id>
    <published>2023-03-19T08:42:27.000Z</published>
    <updated>2023-06-24T07:21:52.299Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.luogu.com.cn/problem/CF472B">题目链接</a></p></li><li><p>题目大意<br>有 n 个人， 每个人都有自己想要到达的楼层， 第 i 想要去第 fi 层。 同时有一个电梯， 电梯的最大承受人数为 k。 求电梯的最小运行层数。</p></li><li><p>思路<br>要求电梯的最小运行层数， 我们就要先知道单次电梯的运行层数怎么求。</p><p>假设电梯里有 m 个人, 其中第 i 个人的希望到达层数为 fi, 那么该次电梯的运行数为所有人的希望到达层数的最大值， 即 max{f1, f2…f{m - 1}, fm}</p><p>其次， 因为单次电梯的运行层数为电梯里所有人的希望到达层数的最大值。 所以， 我们可以尽可能地把希望到达层数较大的人放在一起， 同时乘坐电梯， 同时尽可能地将电梯装满。</p><p>接着， 由于电梯从 1 楼上去后还要回到 1 楼。 所以， 在计算电梯单次运行层数时要乘 2. 同时， 电梯从第 1 楼到 t 层共走了 t - 1 层。 所以， 单次电梯的运行层数为 2 * (fi - 1).</p><p>最后， 因为要尽可能地将希望到达层数较大的人放在一起， 所以我们可以先把所有人的希望到达层数从大到小排序一下就可以了。</p></li><li><p>代码实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">1000000</span></span></span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 快读 </span>      <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> n <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          f <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>          ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> f <span class="token operator">*</span> n<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// sort排序用的  </span>      <span class="token keyword">return</span> x <span class="token operator">></span> y<span class="token punctuation">;</span> <span class="token comment">// 从大到小排序 </span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> tot<span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/*   n   : 人数   k   : 电梯的最大承受人数   tot : 最终结果， 即电梯的最小运行层数   f[] : 用来储存所有人希望到达的楼层   */</span>  <span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 主函数 </span>      n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输入， 具体见上注释 </span>      <span class="token function">sort</span> <span class="token punctuation">(</span>f <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 排序， 使所有人希望到达的楼层数按从大到小的顺序 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 每次装满电梯， 所以 i += k </span>          tot <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">/*              因为电梯上去后还要回到第 1 层, 所以要乘 2               从第 1 层到第 i 层共走了 (i - 1) 层              单次电梯运行数为电梯里最大的希望到达数           */</span>      <span class="token punctuation">&#125;</span>      <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> tot<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出最终结果 </span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 完美结束 </span>  <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="此题解仅供参考-谢谢"><a href="#此题解仅供参考-谢谢" class="headerlink" title="此题解仅供参考, 谢谢!"></a>此题解仅供参考, 谢谢!</h2></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/CF472B&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目大意&lt;br&gt;有 n 个人， 每个人都有自己想要到达的楼层， 第 i 想要去第 fi 层。 同时有一个</summary>
      
    
    
    
    <category term="Problem-Explanation" scheme="https://blog.scorpiolimit.top/categories/Problem-Explanation/"/>
    
    
    <category term="Codeforces" scheme="https://blog.scorpiolimit.top/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>CF1784A题解</title>
    <link href="https://blog.scorpiolimit.top/post/CF1784A%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.scorpiolimit.top/post/CF1784A%E9%A2%98%E8%A7%A3/</id>
    <published>2023-03-19T08:32:12.000Z</published>
    <updated>2023-06-24T07:21:41.318Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://www.luogu.com.cn/problem/CF1784A">题目链接</a></p></li><li><p>题目大意<br>有一个序列 a1, a2 … a{n-1}, a{n} 且所有元素皆为正整数，共有两种操作，使得进行若干次操作后的序列的所有元素皆不大于零，求第一种操作的最小操作次数。</p><p>操作如下：   </p><ol><li>选择序列中的任意一个正整数元素，将其减一；</li><li>将序列中所有的正整数元素都将其减一，如有元素因此操作小于等于零，则再次进行一次此操作；</li></ol></li><li><p>注意<br>第一种操作可以执行无数次，第二种操作只可以执行一次。</p></li><li><p>思路<br>很明显，如果序列中的所有元素皆满足 ai + 1 = a{i + 1} 的话，那么我们只需要进行一次操作二即可将序列清零。</p><p>所以，我们便可以先使用操作一将序列有序化（如上），然后在进行一次操作二即可。</p><p>但是，为了最小化第一种操作，为了避免不需要的操作，我们先将序列排序一遍.</p></li><li><p>代码实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">namespace</span> S_T_D <span class="token punctuation">&#123;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> n <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> f <span class="token operator">*</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">,</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">read</span> <span class="token expression"><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">&#125;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> S_T_D<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> tot<span class="token punctuation">,</span> num<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>T <span class="token operator">=</span> read<span class="token punctuation">;</span>              <span class="token comment">// 多组数据 </span><span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>n <span class="token operator">=</span> read<span class="token punctuation">;</span>tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/*tot : 操作一次数 num : 序列有序化基准值*/</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> read<span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 先从小到大排序一遍 </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token comment">// 如果等于基准值，无需操作，跳过 </span><span class="token keyword">else</span> <span class="token operator">++</span> num<span class="token punctuation">,</span> tot <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> num<span class="token punctuation">;</span>   <span class="token comment">// 否则将基准值 + 1，再进行操作一 </span><span class="token punctuation">&#125;</span><span class="token function">write</span><span class="token punctuation">(</span>tot<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出答案 </span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="此题解仅供参考-谢谢"><a href="#此题解仅供参考-谢谢" class="headerlink" title="此题解仅供参考, 谢谢!"></a>此题解仅供参考, 谢谢!</h2></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/CF1784A&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目大意&lt;br&gt;有一个序列 a1, a2 … a{n-1}, a{n} 且所有元素皆为正整数，共有两种</summary>
      
    
    
    
    <category term="Problem-Explanation" scheme="https://blog.scorpiolimit.top/categories/Problem-Explanation/"/>
    
    
    <category term="Codeforces" scheme="https://blog.scorpiolimit.top/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>2018年刑侦科推理试题讲解</title>
    <link href="https://blog.scorpiolimit.top/post/2018%E5%B9%B4%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98%E8%AE%B2%E8%A7%A3/"/>
    <id>https://blog.scorpiolimit.top/post/2018%E5%B9%B4%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98%E8%AE%B2%E8%A7%A3/</id>
    <published>2023-01-26T06:38:13.000Z</published>
    <updated>2023-06-24T07:21:45.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提示：本文章将讲解-《2018年刑侦科推理试题》-的解题过程"><a href="#提示：本文章将讲解-《2018年刑侦科推理试题》-的解题过程" class="headerlink" title="提示：本文章将讲解 《2018年刑侦科推理试题》 的解题过程"></a>提示：本文章将讲解 《2018年刑侦科推理试题》 的解题过程</h3><img src = "https://pic.imgdb.cn/item/63d21be1face21e9ef7c502f.jpg" alt = "1.1"><h3 id="首先看看题就知道这-10-道题目之间相互有线索关联着。"><a href="#首先看看题就知道这-10-道题目之间相互有线索关联着。" class="headerlink" title="首先看看题就知道这 10 道题目之间相互有线索关联着。"></a>首先看看题就知道这 10 道题目之间相互有线索关联着。</h3><h3 id="第一轮查找线索：（找出题面话语背后的意思）"><a href="#第一轮查找线索：（找出题面话语背后的意思）" class="headerlink" title="第一轮查找线索：（找出题面话语背后的意思）"></a>第一轮查找线索：（找出题面话语背后的意思）</h3><h4 id="第1题：找不到有用的线索，答案应该是根据其它题目确定的；"><a href="#第1题：找不到有用的线索，答案应该是根据其它题目确定的；" class="headerlink" title="第1题：找不到有用的线索，答案应该是根据其它题目确定的；"></a>第1题：找不到有用的线索，答案应该是根据其它题目确定的；</h4><h4 id="第2题：说答案是第5题的答案，但是答案的排列完全不同（A-C-B-D-C-A-D-B），所以得出线索是第2题答案-≠-第5题的答案；"><a href="#第2题：说答案是第5题的答案，但是答案的排列完全不同（A-C-B-D-C-A-D-B），所以得出线索是第2题答案-≠-第5题的答案；" class="headerlink" title="第2题：说答案是第5题的答案，但是答案的排列完全不同（A.C B.D C.A D.B），所以得出线索是第2题答案 ≠ 第5题的答案；"></a>第2题：说答案是第5题的答案，但是答案的排列完全不同（A.C B.D C.A D.B），所以得出线索是第2题答案 ≠ 第5题的答案；</h4><h4 id="第3题：说有一题的答案与其他三道题目的答案不同，即只有一题的答案不同，线索是第2、3、4、6题中有3道题的答案相同；"><a href="#第3题：说有一题的答案与其他三道题目的答案不同，即只有一题的答案不同，线索是第2、3、4、6题中有3道题的答案相同；" class="headerlink" title="第3题：说有一题的答案与其他三道题目的答案不同，即只有一题的答案不同，线索是第2、3、4、6题中有3道题的答案相同；"></a>第3题：说有一题的答案与其他三道题目的答案不同，即只有一题的答案不同，线索是第2、3、4、6题中有3道题的答案相同；</h4><h4 id="第4题：说选项中有一组题的答案相同，则线索是-1-5-、-2-7-、-1-9-、-6-10-这四组中只有一组题目的答案相同；"><a href="#第4题：说选项中有一组题的答案相同，则线索是-1-5-、-2-7-、-1-9-、-6-10-这四组中只有一组题目的答案相同；" class="headerlink" title="第4题：说选项中有一组题的答案相同，则线索是 (1,5) 、(2,7)、 (1,9)、 (6,10) 这四组中只有一组题目的答案相同；"></a>第4题：说选项中有一组题的答案相同，则线索是 (1,5) 、(2,7)、 (1,9)、 (6,10) 这四组中只有一组题目的答案相同；</h4><h4 id="第5题：说选项-4-道题中有一题的答案与本题的答案相同，-线索是第4、8、7、9-题中有一题的答案-第5题的答案，其它均-≠-第5题的答案；"><a href="#第5题：说选项-4-道题中有一题的答案与本题的答案相同，-线索是第4、8、7、9-题中有一题的答案-第5题的答案，其它均-≠-第5题的答案；" class="headerlink" title="第5题：说选项 4 道题中有一题的答案与本题的答案相同， 线索是第4、8、7、9 题中有一题的答案 = 第5题的答案，其它均 ≠ 第5题的答案；"></a>第5题：说选项 4 道题中有一题的答案与本题的答案相同， 线索是第4、8、7、9 题中有一题的答案 = 第5题的答案，其它均 ≠ 第5题的答案；</h4><h4 id="第6题：说仅有两题与第8题相同，线索是第-2-4-、-1-6-、-3-10-、-5-9-题中有一组等于第8题，其它与第8题不同；"><a href="#第6题：说仅有两题与第8题相同，线索是第-2-4-、-1-6-、-3-10-、-5-9-题中有一组等于第8题，其它与第8题不同；" class="headerlink" title="第6题：说仅有两题与第8题相同，线索是第(2,4) 、(1,6) 、(3,10)、 (5,9) 题中有一组等于第8题，其它与第8题不同；"></a>第6题：说仅有两题与第8题相同，线索是第(2,4) 、(1,6) 、(3,10)、 (5,9) 题中有一组等于第8题，其它与第8题不同；</h4><h4 id="第7题：选中次数最少，次数需要统计，应该是最后才知道结果的，现在先不考虑它；"><a href="#第7题：选中次数最少，次数需要统计，应该是最后才知道结果的，现在先不考虑它；" class="headerlink" title="第7题：选中次数最少，次数需要统计，应该是最后才知道结果的，现在先不考虑它；"></a>第7题：选中次数最少，次数需要统计，应该是最后才知道结果的，现在先不考虑它；</h4><h4 id="第8题：与第一题的答案字母不相邻，线索是第-2、5、7、10-题中有3题答案与第1题答案字母相邻；"><a href="#第8题：与第一题的答案字母不相邻，线索是第-2、5、7、10-题中有3题答案与第1题答案字母相邻；" class="headerlink" title="第8题：与第一题的答案字母不相邻，线索是第 2、5、7、10 题中有3题答案与第1题答案字母相邻；"></a>第8题：与第一题的答案字母不相邻，线索是第 2、5、7、10 题中有3题答案与第1题答案字母相邻；</h4><h4 id="第9题：两条逻辑语句真假性相反，线索是第9题两句中有一句肯定是真的，另一句肯定是假的；"><a href="#第9题：两条逻辑语句真假性相反，线索是第9题两句中有一句肯定是真的，另一句肯定是假的；" class="headerlink" title="第9题：两条逻辑语句真假性相反，线索是第9题两句中有一句肯定是真的，另一句肯定是假的；"></a>第9题：两条逻辑语句真假性相反，线索是第9题两句中有一句肯定是真的，另一句肯定是假的；</h4><h4 id="第10题：出现次数差，也需要统计，应该也是最后才知道结果，前面也先不考虑它。"><a href="#第10题：出现次数差，也需要统计，应该也是最后才知道结果，前面也先不考虑它。" class="headerlink" title="第10题：出现次数差，也需要统计，应该也是最后才知道结果，前面也先不考虑它。"></a>第10题：出现次数差，也需要统计，应该也是最后才知道结果，前面也先不考虑它。</h4><h3 id="经过一轮的简单分析后，我们得到如下线索："><a href="#经过一轮的简单分析后，我们得到如下线索：" class="headerlink" title="经过一轮的简单分析后，我们得到如下线索："></a>经过一轮的简单分析后，我们得到如下线索：</h3><h4 id="线索1：第2题和第5题答案不相同；"><a href="#线索1：第2题和第5题答案不相同；" class="headerlink" title="线索1：第2题和第5题答案不相同；"></a>线索1：第2题和第5题答案不相同；</h4><h4 id="线索2：第2、3、4、6-题中有3个答案相同；"><a href="#线索2：第2、3、4、6-题中有3个答案相同；" class="headerlink" title="线索2：第2、3、4、6 题中有3个答案相同；"></a>线索2：第2、3、4、6 题中有3个答案相同；</h4><h4 id="线索3：-1-5-、-2-7-、-1-9-、-6-10-这四组中有一组答案相同；"><a href="#线索3：-1-5-、-2-7-、-1-9-、-6-10-这四组中有一组答案相同；" class="headerlink" title="线索3：(1,5)、 (2,7) 、(1,9)、 (6,10) 这四组中有一组答案相同；"></a>线索3：(1,5)、 (2,7) 、(1,9)、 (6,10) 这四组中有一组答案相同；</h4><h4 id="线索4：第4、7、8、9-题中有一题和第5题答案相同，其它与第5题不同；"><a href="#线索4：第4、7、8、9-题中有一题和第5题答案相同，其它与第5题不同；" class="headerlink" title="线索4：第4、7、8、9 题中有一题和第5题答案相同，其它与第5题不同；"></a>线索4：第4、7、8、9 题中有一题和第5题答案相同，其它与第5题不同；</h4><h4 id="线索5：第-2-4-、-1-6-、-3-10-、-5-9-题中有一组和第8题答案相同，其它与第8题不同；"><a href="#线索5：第-2-4-、-1-6-、-3-10-、-5-9-题中有一组和第8题答案相同，其它与第8题不同；" class="headerlink" title="线索5：第 (2,4)、 (1,6) 、(3,10) 、(5,9) 题中有一组和第8题答案相同，其它与第8题不同；"></a>线索5：第 (2,4)、 (1,6) 、(3,10) 、(5,9) 题中有一组和第8题答案相同，其它与第8题不同；</h4><h4 id="线索6：第2、5、7、10-题中有3题答案与第1题答案字母相连；"><a href="#线索6：第2、5、7、10-题中有3题答案与第1题答案字母相连；" class="headerlink" title="线索6：第2、5、7、10 题中有3题答案与第1题答案字母相连；"></a>线索6：第2、5、7、10 题中有3题答案与第1题答案字母相连；</h4><h4 id="线索7：第9题两句中有一句肯定是真的，另一句肯定是假的；"><a href="#线索7：第9题两句中有一句肯定是真的，另一句肯定是假的；" class="headerlink" title="线索7：第9题两句中有一句肯定是真的，另一句肯定是假的；"></a>线索7：第9题两句中有一句肯定是真的，另一句肯定是假的；</h4><h3 id="经过整理，-我们发现第7条线索给出的是一个逻辑判断的条件，那么一真一假之间，只需要最多验证两次假设即可，所以我们选择从第7条线索展开思考。"><a href="#经过整理，-我们发现第7条线索给出的是一个逻辑判断的条件，那么一真一假之间，只需要最多验证两次假设即可，所以我们选择从第7条线索展开思考。" class="headerlink" title="经过整理， 我们发现第7条线索给出的是一个逻辑判断的条件，那么一真一假之间，只需要最多验证两次假设即可，所以我们选择从第7条线索展开思考。"></a>经过整理， 我们发现第7条线索给出的是一个逻辑判断的条件，那么一真一假之间，只需要最多验证两次假设即可，所以我们选择从第7条线索展开思考。</h3><h3 id="分析线索7："><a href="#分析线索7：" class="headerlink" title="分析线索7："></a>分析线索7：</h3><h4 id="“第1题与第6题的答案相同”-与-“第X题与第5题的答案相同”-两句话的真假性相反，也就是说这两句话“一真一假”。"><a href="#“第1题与第6题的答案相同”-与-“第X题与第5题的答案相同”-两句话的真假性相反，也就是说这两句话“一真一假”。" class="headerlink" title="“第1题与第6题的答案相同” 与 “第X题与第5题的答案相同” 两句话的真假性相反，也就是说这两句话“一真一假”。"></a>“第1题与第6题的答案相同” 与 “第X题与第5题的答案相同” 两句话的真假性相反，也就是说这两句话“一真一假”。</h4><h4 id="先假设“第1题与第6题的答案相同”是真的。"><a href="#先假设“第1题与第6题的答案相同”是真的。" class="headerlink" title="先假设“第1题与第6题的答案相同”是真的。"></a>先假设“第1题与第6题的答案相同”是真的。</h4><h4 id="那么我们需要找出满足“第X题与第5题的答案相同”这句话是假的证据，也就是第X题和第5题答案不相同。"><a href="#那么我们需要找出满足“第X题与第5题的答案相同”这句话是假的证据，也就是第X题和第5题答案不相同。" class="headerlink" title="那么我们需要找出满足“第X题与第5题的答案相同”这句话是假的证据，也就是第X题和第5题答案不相同。"></a>那么我们需要找出满足“第X题与第5题的答案相同”这句话是假的证据，也就是第X题和第5题答案不相同。</h4><h4 id="因为是单选题的原因，选项中应该只存在一个答案不相同，其它三个答案应该都与第5题相同。"><a href="#因为是单选题的原因，选项中应该只存在一个答案不相同，其它三个答案应该都与第5题相同。" class="headerlink" title="因为是单选题的原因，选项中应该只存在一个答案不相同，其它三个答案应该都与第5题相同。"></a>因为是单选题的原因，选项中应该只存在一个答案不相同，其它三个答案应该都与第5题相同。</h4><h4 id="根据上面线索1判断，只有第2题答案不等于第5题，那么其它第1、6、9、10-题都是和第5题答案相同。"><a href="#根据上面线索1判断，只有第2题答案不等于第5题，那么其它第1、6、9、10-题都是和第5题答案相同。" class="headerlink" title="根据上面线索1判断，只有第2题答案不等于第5题，那么其它第1、6、9、10 题都是和第5题答案相同。"></a>根据上面线索1判断，只有第2题答案不等于第5题，那么其它第1、6、9、10 题都是和第5题答案相同。</h4><h4 id="这时我们发现这个结果违背了线索3，线索3中应该只有一组答案相同，但是-1-9-、-6-10-都是相同的。"><a href="#这时我们发现这个结果违背了线索3，线索3中应该只有一组答案相同，但是-1-9-、-6-10-都是相同的。" class="headerlink" title="这时我们发现这个结果违背了线索3，线索3中应该只有一组答案相同，但是(1,9) 、(6,10) 都是相同的。"></a>这时我们发现这个结果违背了线索3，线索3中应该只有一组答案相同，但是(1,9) 、(6,10) 都是相同的。</h4><h4 id="那么最后结论是“第1题与第6题的答案相同”的假设不成立，而“第X题与第5题的答案相同”是成立的。"><a href="#那么最后结论是“第1题与第6题的答案相同”的假设不成立，而“第X题与第5题的答案相同”是成立的。" class="headerlink" title="那么最后结论是“第1题与第6题的答案相同”的假设不成立，而“第X题与第5题的答案相同”是成立的。"></a>那么最后结论是“第1题与第6题的答案相同”的假设不成立，而“第X题与第5题的答案相同”是成立的。</h4><h4 id="这里X肯定不是C，因为线索1中确定了第2题和第5题答案不相同。"><a href="#这里X肯定不是C，因为线索1中确定了第2题和第5题答案不相同。" class="headerlink" title="这里X肯定不是C，因为线索1中确定了第2题和第5题答案不相同。"></a>这里X肯定不是C，因为线索1中确定了第2题和第5题答案不相同。</h4><h4 id="这里X肯定也不是D，因为第9题若是和第5题相同，则第5题答案是C，很明显D也是错的。"><a href="#这里X肯定也不是D，因为第9题若是和第5题相同，则第5题答案是C，很明显D也是错的。" class="headerlink" title="这里X肯定也不是D，因为第9题若是和第5题相同，则第5题答案是C，很明显D也是错的。"></a>这里X肯定也不是D，因为第9题若是和第5题相同，则第5题答案是C，很明显D也是错的。</h4><h3 id="增加线索："><a href="#增加线索：" class="headerlink" title="增加线索："></a>增加线索：</h3><h4 id="线索8：第1题和第6题答案不相同；"><a href="#线索8：第1题和第6题答案不相同；" class="headerlink" title="线索8：第1题和第6题答案不相同；"></a>线索8：第1题和第6题答案不相同；</h4><h4 id="线索9：第9题和第5题答案不相同；"><a href="#线索9：第9题和第5题答案不相同；" class="headerlink" title="线索9：第9题和第5题答案不相同；"></a>线索9：第9题和第5题答案不相同；</h4><h3 id="继续分析："><a href="#继续分析：" class="headerlink" title="继续分析："></a>继续分析：</h3><h4 id="这里X肯定也不是A，因为假设是A则第5题和第6题答案相同，就可以推论："><a href="#这里X肯定也不是A，因为假设是A则第5题和第6题答案相同，就可以推论：" class="headerlink" title="这里X肯定也不是A，因为假设是A则第5题和第6题答案相同，就可以推论："></a>这里X肯定也不是A，因为假设是A则第5题和第6题答案相同，就可以推论：</h4><h4 id="第5题和第6题答案都是A时：结果为第2、4、5、8题答案都相同，显示违背了线索1，不成立；"><a href="#第5题和第6题答案都是A时：结果为第2、4、5、8题答案都相同，显示违背了线索1，不成立；" class="headerlink" title="第5题和第6题答案都是A时：结果为第2、4、5、8题答案都相同，显示违背了线索1，不成立；"></a>第5题和第6题答案都是A时：结果为第2、4、5、8题答案都相同，显示违背了线索1，不成立；</h4><h4 id="第5题和第6题答案都是B时：第6题的选项B已经违背了线索8，不成立；"><a href="#第5题和第6题答案都是B时：第6题的选项B已经违背了线索8，不成立；" class="headerlink" title="第5题和第6题答案都是B时：第6题的选项B已经违背了线索8，不成立；"></a>第5题和第6题答案都是B时：第6题的选项B已经违背了线索8，不成立；</h4><h4 id="第5题和第6题答案都是C时：第5题选择C就已经违背了线索9，不成立；"><a href="#第5题和第6题答案都是C时：第5题选择C就已经违背了线索9，不成立；" class="headerlink" title="第5题和第6题答案都是C时：第5题选择C就已经违背了线索9，不成立；"></a>第5题和第6题答案都是C时：第5题选择C就已经违背了线索9，不成立；</h4><h4 id="第5题和第6题答案都是D时：第6题的选项D已经违背了线索9，不成立；"><a href="#第5题和第6题答案都是D时：第6题的选项D已经违背了线索9，不成立；" class="headerlink" title="第5题和第6题答案都是D时：第6题的选项D已经违背了线索9，不成立；"></a>第5题和第6题答案都是D时：第6题的选项D已经违背了线索9，不成立；</h4><h4 id="所以X的结果是B-第10题。"><a href="#所以X的结果是B-第10题。" class="headerlink" title="所以X的结果是B.第10题。"></a>所以X的结果是B.第10题。</h4><h3 id="增加线索：-1"><a href="#增加线索：-1" class="headerlink" title="增加线索："></a>增加线索：</h3><h4 id="线索10：第5题和第10题答案相同；"><a href="#线索10：第5题和第10题答案相同；" class="headerlink" title="线索10：第5题和第10题答案相同；"></a>线索10：第5题和第10题答案相同；</h4><h4 id="第9题分析完成，我们得出了第1个确定的答案："><a href="#第9题分析完成，我们得出了第1个确定的答案：" class="headerlink" title="第9题分析完成，我们得出了第1个确定的答案："></a>第9题分析完成，我们得出了第1个确定的答案：</h4><h4 id="第9题答案：B；"><a href="#第9题答案：B；" class="headerlink" title="第9题答案：B；"></a>第9题答案：B；</h4><h3 id="再来分析第6题：（选择第6题的原因是它给出的条件最多，越多的条件越容易找出反例）"><a href="#再来分析第6题：（选择第6题的原因是它给出的条件最多，越多的条件越容易找出反例）" class="headerlink" title="再来分析第6题：（选择第6题的原因是它给出的条件最多，越多的条件越容易找出反例）"></a>再来分析第6题：（选择第6题的原因是它给出的条件最多，越多的条件越容易找出反例）</h3><h4 id="第6题选A，则第2，4题和第8题答案相同是不成立的，证明如下："><a href="#第6题选A，则第2，4题和第8题答案相同是不成立的，证明如下：" class="headerlink" title="第6题选A，则第2，4题和第8题答案相同是不成立的，证明如下："></a>第6题选A，则第2，4题和第8题答案相同是不成立的，证明如下：</h4><h5 id="第2、4、8题答案都选A时："><a href="#第2、4、8题答案都选A时：" class="headerlink" title="第2、4、8题答案都选A时："></a>第2、4、8题答案都选A时：</h5><ul><li>第2题选A：第5题的答案是C，第5题和第9题答案相同，这样违背了线索9，不成立；</li></ul><h5 id="第2、4、8题答案都选B时："><a href="#第2、4、8题答案都选B时：" class="headerlink" title="第2、4、8题答案都选B时："></a>第2、4、8题答案都选B时：</h5><ul><li><p>第2题选B：第5题的答案是D，第5题和第7题答案相同，这样第7题答案也是D；</p></li><li><p>第4题选B：第2题和第7题答案相同，但当前第2题答案是B，显示也不成立；</p></li></ul><h5 id="第2、4、8题答案都选C时："><a href="#第2、4、8题答案都选C时：" class="headerlink" title="第2、4、8题答案都选C时："></a>第2、4、8题答案都选C时：</h5><ul><li><p>第4题选C：第1题和第9题答案相同，第1题答案就是B；</p></li><li><p>第8题选C：第2题和第1题答案不相邻，但现在第1题答案是B，第2题选择是C，相邻了不成立；</p></li></ul><h5 id="第2、4、8题答案都选D时："><a href="#第2、4、8题答案都选D时：" class="headerlink" title="第2、4、8题答案都选D时："></a>第2、4、8题答案都选D时：</h5><ul><li>第2题选D：第5题答案是B，第4题答案就和第5题相同也是B，可是当前第4题选择是D，不成立；</li></ul><h4 id="第6题选B，直接违背线索8，不成立。"><a href="#第6题选B，直接违背线索8，不成立。" class="headerlink" title="第6题选B，直接违背线索8，不成立。"></a>第6题选B，直接违背线索8，不成立。</h4><h4 id="第6题选D，直接违背线索9，不成立。"><a href="#第6题选D，直接违背线索9，不成立。" class="headerlink" title="第6题选D，直接违背线索9，不成立。"></a>第6题选D，直接违背线索9，不成立。</h4><h4 id="第9题分析完成，我们得出了第2个确定的答案："><a href="#第9题分析完成，我们得出了第2个确定的答案：" class="headerlink" title="第9题分析完成，我们得出了第2个确定的答案："></a>第9题分析完成，我们得出了第2个确定的答案：</h4><h3 id="第6题答案：C"><a href="#第6题答案：C" class="headerlink" title="第6题答案：C"></a>第6题答案：C</h3><h3 id="可以修改线索："><a href="#可以修改线索：" class="headerlink" title="可以修改线索："></a>可以修改线索：</h3><h4 id="线索11：第5，10，3，8题答案相同；"><a href="#线索11：第5，10，3，8题答案相同；" class="headerlink" title="线索11：第5，10，3，8题答案相同；"></a>线索11：第5，10，3，8题答案相同；</h4><h3 id="接下来可以直接得出其它答案了："><a href="#接下来可以直接得出其它答案了：" class="headerlink" title="接下来可以直接得出其它答案了："></a>接下来可以直接得出其它答案了：</h3><h4 id="第5题答案：A，通过第5题的题目与线索10判断；"><a href="#第5题答案：A，通过第5题的题目与线索10判断；" class="headerlink" title="第5题答案：A，通过第5题的题目与线索10判断；"></a>第5题答案：A，通过第5题的题目与线索10判断；</h4><h4 id="第3题答案：A，通过线索10判断；"><a href="#第3题答案：A，通过线索10判断；" class="headerlink" title="第3题答案：A，通过线索10判断；"></a>第3题答案：A，通过线索10判断；</h4><h4 id="第8题答案：A，通过线索10判断；"><a href="#第8题答案：A，通过线索10判断；" class="headerlink" title="第8题答案：A，通过线索10判断；"></a>第8题答案：A，通过线索10判断；</h4><h4 id="第10题答案：A，通过线索10判断；"><a href="#第10题答案：A，通过线索10判断；" class="headerlink" title="第10题答案：A，通过线索10判断；"></a>第10题答案：A，通过线索10判断；</h4><h4 id="第2题答案：C，通过第5题答案判断；"><a href="#第2题答案：C，通过第5题答案判断；" class="headerlink" title="第2题答案：C，通过第5题答案判断；"></a>第2题答案：C，通过第5题答案判断；</h4><h4 id="第7题答案：D，通过已有7个答案和第4题判断："><a href="#第7题答案：D，通过已有7个答案和第4题判断：" class="headerlink" title="第7题答案：D，通过已有7个答案和第4题判断："></a>第7题答案：D，通过已有7个答案和第4题判断：</h4><ul><li><p>目前A答案有4个，B答案有1个，C答案有2个，D答案有0个；</p></li><li><p>第4题答案不可能是D，因为第6题答案和第10题答案不同；</p></li><li><p>第4题答案不可能是B，若第7题答案是C，而A答案结果不可能成为最少的；</p></li><li><p>第4题答案不可能是A，因为A答案有5个，这样无法同时满足第7题和第10题的描述；</p></li></ul><h4 id="第4题答案：C，通过上面分析得出；"><a href="#第4题答案：C，通过上面分析得出；" class="headerlink" title="第4题答案：C，通过上面分析得出；"></a>第4题答案：C，通过上面分析得出；</h4><h4 id="第1题答案：B，通过第4题答案和第9题答案得出；"><a href="#第1题答案：B，通过第4题答案和第9题答案得出；" class="headerlink" title="第1题答案：B，通过第4题答案和第9题答案得出；"></a>第1题答案：B，通过第4题答案和第9题答案得出；</h4><h3 id="所以，-最终答案为"><a href="#所以，-最终答案为" class="headerlink" title="所以， 最终答案为"></a>所以， 最终答案为</h3><h4 id="1-B-2-C-3-A-4-C-5-A-6-C-7-D-8-A-9-B-10-A"><a href="#1-B-2-C-3-A-4-C-5-A-6-C-7-D-8-A-9-B-10-A" class="headerlink" title="1.B, 2.C, 3.A, 4.C, 5.A, 6.C, 7.D, 8.A, 9.B, 10.A"></a>1.B, 2.C, 3.A, 4.C, 5.A, 6.C, 7.D, 8.A, 9.B, 10.A</h4><h4 id="此文章仅供参考，如有疑问，请发送邮件至-2966653003-qq-com，-谢谢"><a href="#此文章仅供参考，如有疑问，请发送邮件至-2966653003-qq-com，-谢谢" class="headerlink" title="此文章仅供参考，如有疑问，请发送邮件至 2966653003@qq.com， 谢谢!"></a>此文章仅供参考，如有疑问，请发送邮件至 <a href="">2966653003@qq.com</a>， 谢谢!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;提示：本文章将讲解-《2018年刑侦科推理试题》-的解题过程&quot;&gt;&lt;a href=&quot;#提示：本文章将讲解-《2018年刑侦科推理试题》-的解题过程&quot; class=&quot;headerlink&quot; title=&quot;提示：本文章将讲解 《2018年刑侦科推理试题》 的解题过程&quot;&gt;</summary>
      
    
    
    
    <category term="学术" scheme="https://blog.scorpiolimit.top/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
    <category term="讲解" scheme="https://blog.scorpiolimit.top/tags/%E8%AE%B2%E8%A7%A3/"/>
    
    <category term="逻辑推理" scheme="https://blog.scorpiolimit.top/tags/%E9%80%BB%E8%BE%91%E6%8E%A8%E7%90%86/"/>
    
    <category term="刑侦科" scheme="https://blog.scorpiolimit.top/tags/%E5%88%91%E4%BE%A6%E7%A7%91/"/>
    
    <category term="2018年刑侦科推理试题" scheme="https://blog.scorpiolimit.top/tags/2018%E5%B9%B4%E5%88%91%E4%BE%A6%E7%A7%91%E6%8E%A8%E7%90%86%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>物理“声的传播”例题分享</title>
    <link href="https://blog.scorpiolimit.top/post/%E7%89%A9%E7%90%86%E4%BE%8B%E9%A2%98%E5%88%86%E4%BA%AB[1]/"/>
    <id>https://blog.scorpiolimit.top/post/%E7%89%A9%E7%90%86%E4%BE%8B%E9%A2%98%E5%88%86%E4%BA%AB[1]/</id>
    <published>2022-12-04T08:11:05.000Z</published>
    <updated>2023-06-24T07:21:35.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提示：本文章将要讲的是初中物理中有关“声的传播”的基本例题分享"><a href="#提示：本文章将要讲的是初中物理中有关“声的传播”的基本例题分享" class="headerlink" title="提示：本文章将要讲的是初中物理中有关“声的传播”的基本例题分享"></a>提示：本文章将要讲的是初中物理中有关“声的传播”的基本例题分享</h3><h2 id="【例-1】"><a href="#【例-1】" class="headerlink" title="【例 1】"></a>【例 1】</h2><h3 id="如图-1-1-所示，-声源-S-和观察者-A-都沿-x-轴正方向运动，-相对与地面的速率分别为-Vs-和-Va，-空气中声音的传播速率为-Vp，-设-Vs-lt-Vp，-Va-lt-Vp，-空气相对于地面没有流动。"><a href="#如图-1-1-所示，-声源-S-和观察者-A-都沿-x-轴正方向运动，-相对与地面的速率分别为-Vs-和-Va，-空气中声音的传播速率为-Vp，-设-Vs-lt-Vp，-Va-lt-Vp，-空气相对于地面没有流动。" class="headerlink" title="如图 1.1 所示， 声源 S 和观察者 A 都沿 x 轴正方向运动， 相对与地面的速率分别为 Vs 和 Va， 空气中声音的传播速率为 Vp， 设 Vs &lt; Vp， Va &lt; Vp， 空气相对于地面没有流动。"></a>如图 1.1 所示， 声源 S 和观察者 A 都沿 x 轴正方向运动， 相对与地面的速率分别为 Vs 和 Va， 空气中声音的传播速率为 Vp， 设 Vs &lt; Vp， Va &lt; Vp， 空气相对于地面没有流动。</h3><img src = "https://pic.imgdb.cn/item/638c5e9b16f2c2beb18c1895.png" alt = "1.1"><h3 id="（1）-若声源相继发出两个声信号，时间间隔为-Δt，-请根据发出的这两个声信号从声源传播到观察者的过程，-确定观察者接收到这两个声信号的时间间隔-Δt’。"><a href="#（1）-若声源相继发出两个声信号，时间间隔为-Δt，-请根据发出的这两个声信号从声源传播到观察者的过程，-确定观察者接收到这两个声信号的时间间隔-Δt’。" class="headerlink" title="（1） 若声源相继发出两个声信号，时间间隔为 Δt， 请根据发出的这两个声信号从声源传播到观察者的过程， 确定观察者接收到这两个声信号的时间间隔 Δt’。"></a>（1） 若声源相继发出两个声信号，时间间隔为 Δt， 请根据发出的这两个声信号从声源传播到观察者的过程， 确定观察者接收到这两个声信号的时间间隔 Δt’。</h3><h2 id="【解析】"><a href="#【解析】" class="headerlink" title="【解析】"></a>【解析】</h2><h3 id="（1）设-t1，-t2-为声源-S-发出的两个信号的时刻，-t1’，-t2’-为观察者接收到两个信号的时刻。-则第一个信号经过-t1’-t1-时间被观察者-A-接收到，-第二个信号经过-t2’-t2-时间被观察者-A-接收到，-且-t2-t1-Δt，-t2’-t1’-Δt’。-设声源发出的第一个信号时，-S-和-A-间的距离为-L，-两个声信号从声源传播到观察者的过程中，-它们的远动的距离关系如图-1-2-和-1-3-所示。"><a href="#（1）设-t1，-t2-为声源-S-发出的两个信号的时刻，-t1’，-t2’-为观察者接收到两个信号的时刻。-则第一个信号经过-t1’-t1-时间被观察者-A-接收到，-第二个信号经过-t2’-t2-时间被观察者-A-接收到，-且-t2-t1-Δt，-t2’-t1’-Δt’。-设声源发出的第一个信号时，-S-和-A-间的距离为-L，-两个声信号从声源传播到观察者的过程中，-它们的远动的距离关系如图-1-2-和-1-3-所示。" class="headerlink" title="（1）设 t1， t2 为声源 S 发出的两个信号的时刻， t1’， t2’ 为观察者接收到两个信号的时刻。 则第一个信号经过 t1’ - t1 时间被观察者 A 接收到， 第二个信号经过 t2’ - t2 时间被观察者 A 接收到， 且 t2 - t1 = Δt， t2’ - t1’ = Δt’。 设声源发出的第一个信号时， S 和 A 间的距离为 L， 两个声信号从声源传播到观察者的过程中， 它们的远动的距离关系如图 1.2 和 1.3 所示。"></a>（1）设 t1， t2 为声源 S 发出的两个信号的时刻， t1’， t2’ 为观察者接收到两个信号的时刻。 则第一个信号经过 t1’ - t1 时间被观察者 A 接收到， 第二个信号经过 t2’ - t2 时间被观察者 A 接收到， 且 t2 - t1 = Δt， t2’ - t1’ = Δt’。 设声源发出的第一个信号时， S 和 A 间的距离为 L， 两个声信号从声源传播到观察者的过程中， 它们的远动的距离关系如图 1.2 和 1.3 所示。</h3><img src = "https://pic.imgdb.cn/item/638c5ea916f2c2beb18c2b0f.png" alt = "1.2"><img src = "https://pic.imgdb.cn/item/638c5eb516f2c2beb18c3ad9.png" alt = "1.3"><h3 id="于是，-可得："><a href="#于是，-可得：" class="headerlink" title="于是， 可得："></a>于是， 可得：</h3><h3 id="1-Vp-t1’-t1-L-Va-t1’-t1"><a href="#1-Vp-t1’-t1-L-Va-t1’-t1" class="headerlink" title="1. Vp(t1’ - t1) = L + Va(t1’ - t1)"></a>1. Vp(t1’ - t1) = L + Va(t1’ - t1)</h3><h3 id="2-Vp-t2’-t2-L-Va-t2’-t1-VsΔt"><a href="#2-Vp-t2’-t2-L-Va-t2’-t1-VsΔt" class="headerlink" title="2. Vp(t2’ - t2) = L + Va(t2’ - t1) - VsΔt"></a>2. Vp(t2’ - t2) = L + Va(t2’ - t1) - VsΔt</h3><h3 id="由以上两式解得："><a href="#由以上两式解得：" class="headerlink" title="由以上两式解得："></a>由以上两式解得：</h3><h3 id="Δt’-Vp-Vs-Δt-Vp-Va"><a href="#Δt’-Vp-Vs-Δt-Vp-Va" class="headerlink" title="Δt’ = (Vp - Vs)Δt / (Vp - Va)"></a>Δt’ = (Vp - Vs)Δt / (Vp - Va)</h3><h4 id="此文章仅供参考，如有疑问，请发送邮件至-2966653003-qq-com，-谢谢"><a href="#此文章仅供参考，如有疑问，请发送邮件至-2966653003-qq-com，-谢谢" class="headerlink" title="此文章仅供参考，如有疑问，请发送邮件至 2966653003@qq.com， 谢谢!"></a>此文章仅供参考，如有疑问，请发送邮件至 <a href="">2966653003@qq.com</a>， 谢谢!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;提示：本文章将要讲的是初中物理中有关“声的传播”的基本例题分享&quot;&gt;&lt;a href=&quot;#提示：本文章将要讲的是初中物理中有关“声的传播”的基本例题分享&quot; class=&quot;headerlink&quot; title=&quot;提示：本文章将要讲的是初中物理中有关“声的传播”的基本例题分</summary>
      
    
    
    
    <category term="学术" scheme="https://blog.scorpiolimit.top/categories/%E5%AD%A6%E6%9C%AF/"/>
    
    
    <category term="物理" scheme="https://blog.scorpiolimit.top/tags/%E7%89%A9%E7%90%86/"/>
    
    <category term="学习笔记" scheme="https://blog.scorpiolimit.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CF1730A题解</title>
    <link href="https://blog.scorpiolimit.top/post/Codeforces-Round823(Div.%202)[A.Planets]/"/>
    <id>https://blog.scorpiolimit.top/post/Codeforces-Round823(Div.%202)[A.Planets]/</id>
    <published>2022-09-30T10:23:17.000Z</published>
    <updated>2023-06-24T07:21:38.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-Round-823-Div-2-A-Plantes-题解"><a href="#Codeforces-Round-823-Div-2-A-Plantes-题解" class="headerlink" title="Codeforces Round #823 (Div. 2) A.Plantes 题解"></a>Codeforces Round #823 (Div. 2) A.Plantes 题解</h2><h4 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a><a href="https://codeforces.com/contest/1730/problem/A">原题链接</a></h4><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><h4 id="题意大致是-在-n-条轨道里-每一条轨道上都有一些星球-即障碍物-且第-i-条轨道上共有-a-i-个障碍物"><a href="#题意大致是-在-n-条轨道里-每一条轨道上都有一些星球-即障碍物-且第-i-条轨道上共有-a-i-个障碍物" class="headerlink" title="题意大致是: 在 n 条轨道里, 每一条轨道上都有一些星球(即障碍物), 且第 i 条轨道上共有 a[i] 个障碍物."></a>题意大致是: 在 n 条轨道里, 每一条轨道上都有一些星球(即障碍物), 且第 i 条轨道上共有 a[i] 个障碍物.</h4><h4 id="现在有两台可以消灭障碍物的机器-A-和-B"><a href="#现在有两台可以消灭障碍物的机器-A-和-B" class="headerlink" title="现在有两台可以消灭障碍物的机器 A 和 B."></a>现在有两台可以消灭障碍物的机器 A 和 B.</h4><h4 id="机器-A-一次性只能消灭一个障碍物-而且每消灭一个障碍物-总费用就要加-1"><a href="#机器-A-一次性只能消灭一个障碍物-而且每消灭一个障碍物-总费用就要加-1" class="headerlink" title="机器 A 一次性只能消灭一个障碍物, 而且每消灭一个障碍物, 总费用就要加 1."></a>机器 A 一次性只能消灭一个障碍物, 而且每消灭一个障碍物, 总费用就要加 1.</h4><h4 id="机器-B-一次性只能消灭一条轨道上的所有消灭障碍物-而且每消灭一条轨道的所有障碍物-总费用就要加上一个固定的数-k"><a href="#机器-B-一次性只能消灭一条轨道上的所有消灭障碍物-而且每消灭一条轨道的所有障碍物-总费用就要加上一个固定的数-k" class="headerlink" title="机器 B 一次性只能消灭一条轨道上的所有消灭障碍物, 而且每消灭一条轨道的所有障碍物, 总费用就要加上一个固定的数 k."></a>机器 B 一次性只能消灭一条轨道上的所有消灭障碍物, 而且每消灭一条轨道的所有障碍物, 总费用就要加上一个固定的数 k.</h4><h4 id="求消灭掉所有的障碍物的最小费用"><a href="#求消灭掉所有的障碍物的最小费用" class="headerlink" title="求消灭掉所有的障碍物的最小费用?"></a>求消灭掉所有的障碍物的最小费用?</h4><h2 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h2><h4 id="根据题目意思-我们可以发现-消灭任何一条轨道上的障碍物的方法大致分为两种-没列出来的表示不重要"><a href="#根据题目意思-我们可以发现-消灭任何一条轨道上的障碍物的方法大致分为两种-没列出来的表示不重要" class="headerlink" title="根据题目意思, 我们可以发现, 消灭任何一条轨道上的障碍物的方法大致分为两种(没列出来的表示不重要):"></a>根据题目意思, 我们可以发现, 消灭任何一条轨道上的障碍物的方法大致分为两种(没列出来的表示不重要):</h4><h4 id="1-用机器-A-消灭-费用为-a-i-记为-A-i"><a href="#1-用机器-A-消灭-费用为-a-i-记为-A-i" class="headerlink" title="1. 用机器 A 消灭, 费用为 a[i], 记为 A[i]."></a>1. 用机器 A 消灭, 费用为 a[i], 记为 A[i].</h4><h4 id="2-用机器-B-消灭-费用为-k-记为-B-i"><a href="#2-用机器-B-消灭-费用为-k-记为-B-i" class="headerlink" title="2. 用机器 B 消灭, 费用为 k, 记为 B[i]."></a>2. 用机器 B 消灭, 费用为 k, 记为 B[i].</h4><h4 id="所以-我们在每一条轨道上的最小费用就是-min-A-i-B-i"><a href="#所以-我们在每一条轨道上的最小费用就是-min-A-i-B-i" class="headerlink" title="所以, 我们在每一条轨道上的最小费用就是 min(A[i], B[i])"></a>所以, 我们在每一条轨道上的最小费用就是 min(A[i], B[i])</h4><h4 id="所以-我们只需要把每一条轨道上的最小费用加在一起-就是总费用了"><a href="#所以-我们只需要把每一条轨道上的最小费用加在一起-就是总费用了" class="headerlink" title="所以, 我们只需要把每一条轨道上的最小费用加在一起, 就是总费用了."></a>所以, 我们只需要把每一条轨道上的最小费用加在一起, 就是总费用了.</h4><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">110</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> n <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> f <span class="token operator">*</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>tot <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> tot <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="此题解仅供参考-若有疑问请在评论区留言-谢谢"><a href="#此题解仅供参考-若有疑问请在评论区留言-谢谢" class="headerlink" title="此题解仅供参考, 若有疑问请在评论区留言, 谢谢!"></a>此题解仅供参考, 若有疑问请在评论区留言, 谢谢!</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Codeforces-Round-823-Div-2-A-Plantes-题解&quot;&gt;&lt;a href=&quot;#Codeforces-Round-823-Div-2-A-Plantes-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces Rou</summary>
      
    
    
    
    <category term="Problem-Explanation" scheme="https://blog.scorpiolimit.top/categories/Problem-Explanation/"/>
    
    
    <category term="Codeforces" scheme="https://blog.scorpiolimit.top/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.scorpiolimit.top/post/hello/"/>
    <id>https://blog.scorpiolimit.top/post/hello/</id>
    <published>2022-08-30T01:58:32.000Z</published>
    <updated>2023-06-24T07:21:49.833Z</updated>
    
    <content type="html"><![CDATA[<h4 id="「人生若只如初见，何事秋风悲画扇」"><a href="#「人生若只如初见，何事秋风悲画扇」" class="headerlink" title="「人生若只如初见，何事秋风悲画扇」"></a>「人生若只如初见，何事秋风悲画扇」</h4><h4 id="大家好！我是-Scorpio-Limit，相遇即是缘分，感谢您能在百忙之中浏览这个网页，作为一个普普通通的-OIer，我将在次博客中分享学科知识、题目解题思路题解、生活日常、和一些有趣的东西。"><a href="#大家好！我是-Scorpio-Limit，相遇即是缘分，感谢您能在百忙之中浏览这个网页，作为一个普普通通的-OIer，我将在次博客中分享学科知识、题目解题思路题解、生活日常、和一些有趣的东西。" class="headerlink" title="大家好！我是 Scorpio_Limit，相遇即是缘分，感谢您能在百忙之中浏览这个网页，作为一个普普通通的 OIer，我将在次博客中分享学科知识、题目解题思路题解、生活日常、和一些有趣的东西。"></a>大家好！我是 Scorpio_Limit，相遇即是缘分，感谢您能在百忙之中浏览这个网页，作为一个普普通通的 OIer，我将在次博客中分享学科知识、题目解题思路题解、生活日常、和一些有趣的东西。</h4><h4 id="若对本博客有疑问、建议等问题，-请通过邮箱-2966653003-qq-com-向作者反馈，-谢谢配合！"><a href="#若对本博客有疑问、建议等问题，-请通过邮箱-2966653003-qq-com-向作者反馈，-谢谢配合！" class="headerlink" title="若对本博客有疑问、建议等问题， 请通过邮箱 2966653003@qq.com 向作者反馈， 谢谢配合！"></a>若对本博客有疑问、建议等问题， 请通过邮箱 <a href="">2966653003@qq.com</a> 向作者反馈， 谢谢配合！</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;「人生若只如初见，何事秋风悲画扇」&quot;&gt;&lt;a href=&quot;#「人生若只如初见，何事秋风悲画扇」&quot; class=&quot;headerlink&quot; title=&quot;「人生若只如初见，何事秋风悲画扇」&quot;&gt;&lt;/a&gt;「人生若只如初见，何事秋风悲画扇」&lt;/h4&gt;&lt;h4 id=&quot;大家好！我</summary>
      
    
    
    
    <category term="Hello" scheme="https://blog.scorpiolimit.top/categories/Hello/"/>
    
    
    <category term="Welcome" scheme="https://blog.scorpiolimit.top/tags/Welcome/"/>
    
  </entry>
  
</feed>
